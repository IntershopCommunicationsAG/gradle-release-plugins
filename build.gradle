plugins {
    // project plugins
    id 'java-gradle-plugin'
    id 'groovy'
    // test coverage
    id 'jacoco'

    // ide plugin
    id 'idea'

    // publish plugin
    id 'maven-publish'

    // intershop version plugin
    id 'com.intershop.gradle.scmversion' version '3.4.0'

    // plugin for documentation
    id 'org.asciidoctor.convert' version '1.5.3'

    // plugin for publishing to Gradle Portal
    id 'com.gradle.plugin-publish' version '0.9.9'

    // plugin for publishing to jcenter
    id 'com.jfrog.bintray' version '1.8.0'
}

scm {
    version {
        initialVersion = '1.0.0'
    }
}

group 'com.intershop.gradle.publish'
description 'Gradle publish plugins'
version = scm.version.version

gradlePlugin {
    plugins {
        simpleartifactorypublishPlugin {
            id = 'com.intershop.gradle.simpleartifactorypublish-configuration'
            implementationClass = 'com.intershop.gradle.artifactorypublish.SimpleArtifactoryPublishConfigurationPlugin'
        }
        artifactorypublishPlugin {
            id = 'com.intershop.gradle.artifactorypublish-configuration'
            implementationClass = 'com.intershop.gradle.artifactorypublish.ArtifactoryPublishConfigurationPlugin'
        }
        simplepublishPlugin {
            id = 'com.intershop.gradle.simplepublish-configuration'
            implementationClass = 'com.intershop.gradle.simplepublish.PublishConfigurationPlugin'
        }
        escrowPlugin {
            id = 'com.intershop.gradle.escrow-plugin'
            implementationClass = 'com.intershop.gradle.escrow.EscrowPlugin'
        }
        javadocPlugin {
            id = 'com.intershop.gradle.javadoc-plugin'
            implementationClass = 'com.intershop.gradle.javadoc.JavaDocPlugin'
        }
        javasourcePlugin {
            id = 'com.intershop.gradle.javasource-plugin'
            implementationClass = 'com.intershop.gradle.javasource.JavaSourcePlugin'
        }
    }
}

// plugins should work with JDK 1.7 aslong
// older INTERSHOP version use this version of JDK
sourceCompatibility = 1.8
targetCompatibility = 1.8

// set correct project status
if (project.version.endsWith('-SNAPSHOT')) {
    status = 'snapshot'
}

test {
    // Gradle versions for test
    systemProperty 'intershop.gradle.versions', '4.3.1'
}

task copyAsciiDoc {
    def outputDir = file("$buildDir/tmp/asciidoctorSrc")
    def inputFiles = fileTree(dir: rootDir, include: '**/*.asciidoc')

    inputs.files inputFiles
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()

        copy {
            from inputFiles
            into outputDir
        }
    }
}

asciidoctorj {
    noDefaultRepositories = true
}

asciidoctor {
    sourceDir "${buildDir}/tmp/asciidoctorSrc"
    sources {
        include 'README.asciidoc'
    }

    backends 'html5', 'docbook'
    options doctype : 'article',
            ruby    : 'erubis'
    attributes  'latestRevision'     : project.version,
            'toc':'left',
            'toclevels':'2',
            'source-highlighter' : 'coderay',
            'icons': 'font',
            'setanchors':'true',
            'idprefix':'asciidoc_',
            'idseparator':'-',
            'docinfo1':'true'
}

asciidoctor.dependsOn copyAsciiDoc

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task groovydocJar(type: Jar) {
    dependsOn groovydoc
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

// additional sources artifact
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

publishing {
    publications {
        intershopMvn(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact groovydocJar {
                classifier "javadoc"
            }

            artifact(new File(buildDir, 'asciidoc/html5/README.html')) {
                classifier 'reference'
            }

            artifact(new File(buildDir, 'asciidoc/docbook/README.xml')) {
                classifier = 'docbook'
            }

            pom.withXml {
                Node root = asNode()
                root.appendNode('name', project.name)
                root.appendNode('description', project.description)
                root.appendNode('url', "https:/gitlab.intershop.de/IntershopGradlePlugins/${project.name}")

                def scm = root.appendNode( 'scm' )
                scm.appendNode( 'url', "https://gitlab.intershop.de/IntershopGradlePlugins/${project.name}")
                scm.appendNode( 'connection', "scm:git:https://gitlab.intershop.de/IntershopGradlePlugins/${project.name}.git")

                def org = root.appendNode( 'organization' )
                org.appendNode( 'name', 'Intershop Communications' )
                org.appendNode( 'url', 'http://intershop.com' )

                def license = root.appendNode( 'licenses' ).appendNode( 'license' )
                license.appendNode( 'name', 'Apache License, Version 2.0' )
                license.appendNode( 'url', 'http://www.apache.org/licenses/LICENSE-2.0' )
                license.appendNode( 'distribution', 'repo' )
            }
        }
    }
}

publish.dependsOn asciidoctor

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'maven'
        name = project.name
        userOrg = 'intershopcommunicationsag'

        licenses = ['Apache-2.0']
        vcsUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"

        desc = project.description
        websiteUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"
        issueTrackerUrl = "https://github.com/IntershopCommunicationsAG/${project.name}/issues"

        labels = ['intershop', 'gradle', 'plugin', 'publish', 'release']
        publicDownloadNumbers = true

        version {
            name = project.version
            desc = "${project.description} ${project.version}"
            released  = new Date()
            vcsTag = project.version
        }

        publications = ['intershopMvn']
    }
}

bintrayUpload.dependsOn asciidoctor

pluginBundle {
    website = "https://github.com/IntershopCommunicationsAG/${project.name}"
    vcsUrl = "https://github.com/IntershopCommunicationsAG/${project.name}"
    description = project.description
    tags = ['intershop', 'gradle', 'plugin', 'publish', 'release']

    plugins {
        escrowPlugin {
            id = gradlePlugin.plugins.escrowPlugin.id
            displayName = 'Plugin for escrow package creation'
        }
        javadocPlugin {
            id = gradlePlugin.plugins.javadocPlugin.id
            displayName = 'Plugin with Intershop specific javadoc configuration'
        }
        javasourcePlugin {
            id = gradlePlugin.plugins.javasourcePlugin.id
            displayName = 'Plugin with javasource package configuration'
        }
        simplepublishPlugin {
            id = gradlePlugin.plugins.simplepublishPlugin.id
            displayName = 'Plugin with simple publishing configuration'
        }
        artifactorypublishPlugin {
            id = gradlePlugin.plugins.artifactorypublishPlugin.id
            displayName = 'Plugin with Intershop specific publishing configuration with Artifactory'
        }
        simpleartifactorypublishPlugin {
            id = gradlePlugin.plugins.simpleartifactorypublishPlugin.id
            displayName = 'Plugin with Intershop specific simple publishing configuration with Artifactory'
        }
    }
}

dependencies {
    compile 'com.intershop.gradle.jiraconnector:jiraconnector-gradle-plugin:3.1.0'
    compile 'com.intershop.gradle.repoconfig:repoconfig-gradle-plugin:4.2.0'

    compile('org.jfrog.buildinfo:build-info-extractor-gradle:4.7.3') {
        exclude module: 'groovy-all'
    }
    compile 'com.intershop.gradle.buildinfo:buildinfo-gradle-plugin:3.2.0'

    testCompile 'com.intershop.gradle.test:test-gradle-plugin:3.0.0'
    testCompile gradleTestKit()

    // mock webserver
    testCompile 'com.squareup.okhttp:okhttp:2.7.5'
    testCompile 'com.squareup.okhttp:mockwebserver:2.7.5'
}

repositories {
    jcenter()
}
